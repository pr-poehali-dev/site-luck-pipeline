import { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import confetti from 'canvas-confetti';

const Index = () => {
  const [wishText, setWishText] = useState('');
  const [showConfetti, setShowConfetti] = useState(false);
  const navigate = useNavigate();
  const confettiInterval = useRef<NodeJS.Timeout | null>(null);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∂–Ω—ã–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
  useEffect(() => {
    if (showConfetti) {
      const startGentleConfetti = () => {
        const colors = [
          '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7',
          '#DDA0DD', '#FFB6C1', '#98FB98', '#F0E68C', '#FFE4E1',
          '#E6E6FA', '#F5DEB3', '#FFA07A', '#20B2AA', '#87CEEB',
          '#DEB887', '#F4A460', '#DA70D6', '#FF69B4', '#00CED1'
        ];
        
        const createParticle = () => {
          const particle = document.createElement('div');
          const size = Math.random() * 8 + 6; // 6-14px
          const color = colors[Math.floor(Math.random() * colors.length)];
          const shapes = ['circle', 'square', 'triangle', 'star', 'heart', 'diamond'];
          const shape = shapes[Math.floor(Math.random() * shapes.length)];
          const startX = Math.random() * window.innerWidth;
          
          // –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏
          particle.style.position = 'fixed';
          particle.style.left = startX + 'px';
          particle.style.top = '-20px';
          particle.style.width = size + 'px';
          particle.style.height = size + 'px';
          particle.style.pointerEvents = 'none';
          particle.style.zIndex = '9999';
          particle.style.opacity = '0';
          
          // –°—Ç–∏–ª–∏ —Ñ–æ—Ä–º
          switch(shape) {
            case 'circle':
              particle.style.backgroundColor = color;
              particle.style.borderRadius = '50%';
              particle.style.boxShadow = `0 0 ${size/2}px ${color}40`;
              break;
            case 'square':
              particle.style.backgroundColor = color;
              particle.style.borderRadius = '20%';
              particle.style.boxShadow = `0 0 ${size/3}px ${color}30`;
              break;
            case 'triangle':
              particle.style.width = '0';
              particle.style.height = '0';
              particle.style.borderLeft = `${size/2}px solid transparent`;
              particle.style.borderRight = `${size/2}px solid transparent`;
              particle.style.borderBottom = `${size}px solid ${color}`;
              particle.style.filter = `drop-shadow(0 0 ${size/3}px ${color}40)`;
              break;
            case 'star':
              particle.innerHTML = '‚≠ê';
              particle.style.fontSize = size + 'px';
              particle.style.filter = `hue-rotate(${Math.random() * 360}deg) brightness(1.2)`;
              break;
            case 'heart':
              particle.innerHTML = 'üíñ';
              particle.style.fontSize = size + 'px';
              particle.style.filter = `hue-rotate(${Math.random() * 360}deg) saturate(1.5)`;
              break;
            case 'diamond':
              particle.style.backgroundColor = color;
              particle.style.transform = 'rotate(45deg)';
              particle.style.borderRadius = '10%';
              particle.style.boxShadow = `0 0 ${size/2}px ${color}50`;
              break;
          }
          
          document.body.appendChild(particle);
          
          // –ê–Ω–∏–º–∞—Ü–∏—è –ø–∞–¥–µ–Ω–∏—è
          const duration = 8000; // 8 —Å–µ–∫—É–Ω–¥
          const startTime = performance.now();
          
          const animate = (currentTime: number) => {
            const elapsed = currentTime - startTime;
            const progress = elapsed / duration;
            
            if (progress >= 1) {
              particle.remove();
              return;
            }
            
            // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
            let opacity = 0;
            if (progress < 0.1) {
              opacity = progress * 10; // 0‚Üí1 –∑–∞ –ø–µ—Ä–≤—ã–µ 10%
            } else if (progress > 0.9) {
              opacity = (1 - progress) * 10; // 1‚Üí0 –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10%
            } else {
              opacity = Math.max(0.4, 1 - progress * 0.6); // 1‚Üí0.4
            }
            
            // –ü–æ–∑–∏—Ü–∏—è Y
            const y = -20 + (window.innerHeight + 40) * progress;
            
            // –ö–∞—á–∞–Ω–∏–µ –∏–∑ —Å—Ç–æ—Ä–æ–Ω—ã –≤ —Å—Ç–æ—Ä–æ–Ω—É
            const swayAmount = 30;
            const swayX = Math.sin(progress * Math.PI * 4) * swayAmount;
            
            // –í—Ä–∞—â–µ–Ω–∏–µ
            const rotation = progress * 360;
            
            particle.style.opacity = opacity.toString();
            particle.style.top = y + 'px';
            particle.style.left = (startX + swayX) + 'px';
            
            if (shape !== 'diamond') {
              particle.style.transform = `rotate(${rotation}deg)`;
            } else {
              particle.style.transform = `rotate(${45 + rotation}deg)`;
            }
            
            requestAnimationFrame(animate);
          };
          
          requestAnimationFrame(animate);
        };
        
        const spawnGroup = () => {
          const groupSize = Math.floor(Math.random() * 4) + 2; // 2-5 —á–∞—Å—Ç–∏—Ü
          for (let i = 0; i < groupSize; i++) {
            setTimeout(() => createParticle(), i * 100);
          }
        };
        
        confettiInterval.current = setInterval(() => {
          spawnGroup();
        }, Math.random() * 800 + 600); // 0.6-1.4 —Å–µ–∫—É–Ω–¥—ã
        
        // –ü–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ —Å—Ä–∞–∑—É
        spawnGroup();
      };
      
      startGentleConfetti();
    }
    
    return () => {
      if (confettiInterval.current) {
        clearInterval(confettiInterval.current);
      }
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏—Ü—ã
      document.querySelectorAll('div[style*="position: fixed"]').forEach(el => {
        if (el.style.zIndex === '9999') el.remove();
      });
    };
  }, [showConfetti]);

  const handleSubmit = () => {
    if (wishText.trim()) {
      // –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
      setShowConfetti(true);
      
      // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–∞—Ä–∏—Ñ–æ–≤ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        setShowConfetti(false);
        navigate('/pricing', { state: { wish: wishText } });
      }, 2000);
    }
  };

  return (
    <div className="min-h-screen bg-white flex flex-col items-center justify-between p-4">
      <div className="w-full max-w-2xl space-y-8 flex-1 flex flex-col justify-center">
        {/* –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center space-y-4">
          <h1 className="font-bold text-gray-900 mb-8 text-8xl">
            –°–ê–ô–¢ –£–î–ê–ß–ò
          </h1>
          <p className="text-xl text-gray-600">
            –ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–µ–º –Ω—É–∂–Ω–∞ —É–¥–∞—á–∞
          </p>
        </div>

        {/* –§–æ—Ä–º–∞ */}
        <Card className="shadow-lg">
          <CardHeader>
            <CardTitle className="text-center text-2xl">–í–∞—à–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ —É–¥–∞—á–∏</CardTitle>
            <CardDescription className="text-center">
              –û–ø–∏—à–∏—Ç–µ, –≤ –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ –∂–∏–∑–Ω–∏ –≤–∞–º –Ω—É–∂–Ω–∞ —É–¥–∞—á–∞
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <Textarea
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ù—É–∂–Ω–∞ —É–¥–∞—á–∞ –≤ —Ä–∞–±–æ—Ç–µ, –≤ –ª—é–±–≤–∏, –≤ –∑–¥–æ—Ä–æ–≤—å–µ..."
              value={wishText}
              onChange={(e) => setWishText(e.target.value)}
              className="min-h-32 text-lg"
            />
            <div className="flex justify-center">
              <Button 
                onClick={handleSubmit}
                className="px-8 py-3 text-lg"
                disabled={!wishText.trim()}
              >
                OK
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
      
      {/* –°—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –≤–Ω–∏–∑—É */}
      <div className="w-full flex justify-center pb-4">
        <button 
          onClick={() => navigate('/rules')}
          className="text-gray-500 hover:text-gray-700 underline text-sm"
        >
          –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        </button>
      </div>
    </div>
  );
};

export default Index;