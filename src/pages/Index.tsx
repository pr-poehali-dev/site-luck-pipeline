import { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';

const Index = () => {
  const [wishText, setWishText] = useState('');
  const navigate = useNavigate();
  const confettiInterval = useRef<NodeJS.Timeout | null>(null);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —è—Ä–∫–æ–≥–æ —Ä–∞–¥—É–∂–Ω–æ–≥–æ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    const startRainbowConfetti = () => {
      // –Ø—Ä–∫–∞—è —Ä–∞–¥—É–∂–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞ —Å –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
      const colors = [
        { primary: '#FF0080', secondary: '#FF6B9D' }, // —è—Ä–∫–æ-—Ä–æ–∑–æ–≤—ã–π
        { primary: '#00BFFF', secondary: '#87CEEB' }, // –Ω–µ–±–µ—Å–Ω–æ-–≥–æ–ª—É–±–æ–π
        { primary: '#32CD32', secondary: '#90EE90' }, // –ª–∞–π–º-–∑–µ–ª–µ–Ω—ã–π
        { primary: '#FFD700', secondary: '#FFF68F' }, // –∑–æ–ª–æ—Ç–æ–π
        { primary: '#FF4500', secondary: '#FF7F50' }, // –æ—Ä–∞–Ω–∂–µ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π
        { primary: '#9932CC', secondary: '#DA70D6' }, // —Ç–µ–º–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
        { primary: '#FF1493', secondary: '#FF69B4' }, // —Ç–µ–º–Ω–æ-—Ä–æ–∑–æ–≤—ã–π
        { primary: '#00CED1', secondary: '#48D1CC' }, // —Ç–µ–º–Ω–æ-–±–∏—Ä—é–∑–æ–≤—ã–π
        { primary: '#FF6347', secondary: '#FFA07A' }, // —Ç–æ–º–∞—Ç–Ω—ã–π
        { primary: '#7B68EE', secondary: '#9370DB' }, // —Å—Ä–µ–¥–Ω–µ-—Å–∏–Ω–∏–π
        { primary: '#20B2AA', secondary: '#66CDAA' }, // —Å–≤–µ—Ç–ª–æ-–º–æ—Ä—Å–∫–æ–π
        { primary: '#FF8C00', secondary: '#FFB347' }, // —Ç–µ–º–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
        { primary: '#DC143C', secondary: '#F08080' }, // –±–∞–≥—Ä—è–Ω—ã–π
        { primary: '#4169E1', secondary: '#6495ED' }, // –∫–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π —Å–∏–Ω–∏–π
        { primary: '#228B22', secondary: '#32CD32' }, // –ª–µ—Å–Ω–æ–π –∑–µ–ª–µ–Ω—ã–π
        { primary: '#FF00FF', secondary: '#DA70D6' }, // –ø—É—Ä–ø—É—Ä–Ω—ã–π
        { primary: '#00FF7F', secondary: '#7FFF00' }, // –≤–µ—Å–µ–Ω–Ω–µ-–∑–µ–ª–µ–Ω—ã–π
        { primary: '#FF69B4', secondary: '#FFB6C1' }, // –≥–æ—Ä—è—á–∏–π —Ä–æ–∑–æ–≤—ã–π
        { primary: '#4682B4', secondary: '#87CEFA' }, // —Å—Ç–∞–ª—å–Ω–æ–π —Å–∏–Ω–∏–π
        { primary: '#D2691E', secondary: '#F4A460' }, // —à–æ–∫–æ–ª–∞–¥–Ω—ã–π
      ];
      
      const shapes = ['circle', 'diamond', 'star', 'heart', 'petal', 'square', 'sparkle', 'flower'];
      
      const createParticle = () => {
        const particle = document.createElement('div');
        const size = Math.random() * 10 + 6; // 6-16px (–±–æ–ª—å—à–µ —Ä–∞–∑–º–µ—Ä)
        const colorSet = colors[Math.floor(Math.random() * colors.length)];
        const shape = shapes[Math.floor(Math.random() * shapes.length)];
        const startX = Math.random() * window.innerWidth;
        
        // –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤—Å–µ—Ö —á–∞—Å—Ç–∏—Ü
        particle.style.position = 'fixed';
        particle.style.left = startX + 'px';
        particle.style.top = '-40px';
        particle.style.width = size + 'px';
        particle.style.height = size + 'px';
        particle.style.pointerEvents = 'none';
        particle.style.zIndex = '9998';
        particle.style.opacity = '0';
        particle.style.transition = 'none';
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã—Ö —è—Ä–∫–∏—Ö —Ñ–æ—Ä–º
        switch(shape) {
          case 'circle':
            particle.style.background = `radial-gradient(circle, ${colorSet.primary}, ${colorSet.secondary})`;
            particle.style.borderRadius = '50%';
            particle.style.boxShadow = `0 0 ${size*1.5}px ${colorSet.primary}60, 0 0 ${size*2.5}px ${colorSet.secondary}30`;
            break;
            
          case 'diamond':
            particle.style.background = `linear-gradient(45deg, ${colorSet.primary}, ${colorSet.secondary})`;
            particle.style.borderRadius = '15%';
            particle.style.transform = 'rotate(45deg)';
            particle.style.boxShadow = `0 0 ${size*2}px ${colorSet.primary}40, 0 0 ${size*3}px ${colorSet.secondary}20`;
            break;
            
          case 'square':
            particle.style.background = `linear-gradient(135deg, ${colorSet.primary}, ${colorSet.secondary})`;
            particle.style.borderRadius = '25%';
            particle.style.boxShadow = `0 0 ${size*1.5}px ${colorSet.primary}50`;
            break;
            
          case 'star':
            const starEmojis = ['‚≠ê', 'üåü', '‚ú®', 'üí´'];
            particle.innerHTML = starEmojis[Math.floor(Math.random() * starEmojis.length)];
            particle.style.fontSize = size + 'px';
            particle.style.filter = `hue-rotate(${Math.random() * 360}deg) brightness(1.3) saturate(1.5)`;
            particle.style.textShadow = `0 0 ${size}px ${colorSet.primary}80`;
            break;
            
          case 'heart':
            const heartEmojis = ['üíñ', 'üíï', 'üíù', 'üíó', 'üíò'];
            particle.innerHTML = heartEmojis[Math.floor(Math.random() * heartEmojis.length)];
            particle.style.fontSize = size + 'px';
            particle.style.filter = `hue-rotate(${Math.random() * 360}deg) brightness(1.2) saturate(1.4)`;
            particle.style.textShadow = `0 0 ${size}px ${colorSet.primary}70`;
            break;
            
          case 'petal':
            particle.style.background = `linear-gradient(135deg, ${colorSet.primary}, ${colorSet.secondary})`;
            particle.style.borderRadius = '100% 0% 100% 0%';
            particle.style.boxShadow = `0 0 ${size*1.5}px ${colorSet.primary}40`;
            break;
            
          case 'sparkle':
            particle.innerHTML = '‚ú¶';
            particle.style.fontSize = size + 'px';
            particle.style.color = colorSet.primary;
            particle.style.filter = `brightness(1.4) saturate(1.6)`;
            particle.style.textShadow = `0 0 ${size}px ${colorSet.primary}90, 0 0 ${size*2}px ${colorSet.secondary}50`;
            break;
            
          case 'flower':
            const flowerEmojis = ['üå∏', 'üå∫', 'üåª', 'üå∑', 'üåπ'];
            particle.innerHTML = flowerEmojis[Math.floor(Math.random() * flowerEmojis.length)];
            particle.style.fontSize = size + 'px';
            particle.style.filter = `hue-rotate(${Math.random() * 360}deg) brightness(1.2)`;
            particle.style.textShadow = `0 0 ${size/2}px ${colorSet.primary}60`;
            break;
        }
        
        document.body.appendChild(particle);
        
        // –ë–æ–ª–µ–µ –±—ã—Å—Ç—Ä–∞—è –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        const duration = Math.random() * 3000 + 6000; // 6-9 —Å–µ–∫—É–Ω–¥ (–±—ã—Å—Ç—Ä–µ–µ)
        const startTime = performance.now();
        const swayFreq = Math.random() * 3 + 2; // 2-5 –∫–æ–ª–µ–±–∞–Ω–∏–π
        const rotationSpeed = Math.random() * 360 + 180; // 180-540 –≥—Ä–∞–¥—É—Å–æ–≤
        const initialRotation = Math.random() * 360;
        
        const animate = (currentTime: number) => {
          const elapsed = currentTime - startTime;
          const progress = elapsed / duration;
          
          if (progress >= 1) {
            particle.remove();
            return;
          }
          
          // –ë—ã—Å—Ç—Ä–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
          let opacity = 0;
          if (progress < 0.1) {
            opacity = easeOutQuart(progress / 0.1) * 0.9;
          } else if (progress > 0.85) {
            opacity = easeOutQuart((1 - progress) / 0.15) * 0.9;
          } else {
            opacity = 0.9;
          }
          
          // –ü–∞–¥–µ–Ω–∏–µ —Å –Ω–µ–±–æ–ª—å—à–∏–º —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º
          const fallProgress = easeInOutCubic(progress);
          const y = -40 + (window.innerHeight + 80) * fallProgress;
          
          // –≠–Ω–µ—Ä–≥–∏—á–Ω–æ–µ –∫–∞—á–∞–Ω–∏–µ
          const swayAmount = 40;
          const swayX = Math.sin(progress * Math.PI * swayFreq * 2) * swayAmount;
          
          // –ê–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ
          const rotation = initialRotation + (rotationSpeed * progress);
          
          // –ü—É–ª—å—Å–∏—Ä—É—é—â–µ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
          const pulsScale = 0.9 + Math.sin(progress * Math.PI * 8) * 0.15;
          const scale = pulsScale * (1 + Math.sin(progress * Math.PI * 2) * 0.1);
          
          particle.style.opacity = opacity.toString();
          particle.style.top = y + 'px';
          particle.style.left = (startX + swayX) + 'px';
          
          if (shape === 'diamond') {
            particle.style.transform = `rotate(${45 + rotation}deg) scale(${scale})`;
          } else if (shape === 'petal' || shape === 'square') {
            particle.style.transform = `rotate(${rotation}deg) scale(${scale})`;
          } else if (shape === 'circle') {
            particle.style.transform = `scale(${scale})`;
          } else {
            particle.style.transform = `scale(${scale})`;
          }
          
          requestAnimationFrame(animate);
        };
        
        requestAnimationFrame(animate);
      };
      
      // –§—É–Ω–∫—Ü–∏–∏ –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —ç–Ω–µ—Ä–≥–∏—á–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
      const easeOutQuart = (t: number) => 1 - (--t) * t * t * t;
      const easeInOutCubic = (t: number) => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
      
      const spawnGroup = () => {
        const groupSize = Math.floor(Math.random() * 4) + 3; // 3-6 —á–∞—Å—Ç–∏—Ü (–±–æ–ª—å—à–µ)
        for (let i = 0; i < groupSize; i++) {
          setTimeout(() => createParticle(), i * Math.random() * 150);
        }
      };
      
      // –ß–∞—Å—Ç–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ—Å—Ç–∏
      confettiInterval.current = setInterval(() => {
        spawnGroup();
      }, Math.random() * 600 + 300); // 0.3-0.9 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ (—á–∞—â–µ)
      
      // –ü–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ —Å—Ä–∞–∑—É
      spawnGroup();
    };
    
    startRainbowConfetti();
    
    return () => {
      if (confettiInterval.current) {
        clearInterval(confettiInterval.current);
      }
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏—Ü—ã
      document.querySelectorAll('div[style*="position: fixed"]').forEach(el => {
        if (el.style.zIndex === '9998') el.remove();
      });
    };
  }, []);

  const handleSubmit = () => {
    if (wishText.trim()) {
      navigate('/pricing', { state: { wish: wishText } });
    }
  };

  return (
    <div className="min-h-screen bg-white flex flex-col items-center justify-between p-4">
      <div className="w-full max-w-2xl space-y-8 flex-1 flex flex-col justify-center">
        {/* –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center space-y-4">
          <h1 className="font-bold text-gray-900 mb-8 text-8xl">
            –°–ê–ô–¢ –£–î–ê–ß–ò
          </h1>
          <p className="text-xl text-gray-600">
            –ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–µ–º –Ω—É–∂–Ω–∞ —É–¥–∞—á–∞
          </p>
        </div>

        {/* –§–æ—Ä–º–∞ */}
        <Card className="shadow-lg">
          <CardHeader>
            <CardTitle className="text-center text-2xl">–í–∞—à–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ —É–¥–∞—á–∏</CardTitle>
            <CardDescription className="text-center">
              –û–ø–∏—à–∏—Ç–µ, –≤ –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ –∂–∏–∑–Ω–∏ –≤–∞–º –Ω—É–∂–Ω–∞ —É–¥–∞—á–∞
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <Textarea
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ù—É–∂–Ω–∞ —É–¥–∞—á–∞ –≤ —Ä–∞–±–æ—Ç–µ, –≤ –ª—é–±–≤–∏, –≤ –∑–¥–æ—Ä–æ–≤—å–µ..."
              value={wishText}
              onChange={(e) => setWishText(e.target.value)}
              className="min-h-32 text-lg"
            />
            <div className="flex justify-center">
              <Button 
                onClick={handleSubmit}
                className="px-8 py-3 text-lg"
                disabled={!wishText.trim()}
              >
                OK
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
      
      {/* –°—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –≤–Ω–∏–∑—É */}
      <div className="w-full flex justify-center pb-4">
        <button 
          onClick={() => navigate('/rules')}
          className="text-gray-500 hover:text-gray-700 underline text-sm"
        >
          –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        </button>
      </div>
    </div>
  );
};

export default Index;