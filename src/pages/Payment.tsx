import { useLocation, useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import Icon from '@/components/ui/icon';
import { useEffect, useState, useRef } from 'react';
import LuckDocument from '@/components/LuckDocument';
import { generateLuckDocument, generateAffirmationText, type DocumentData } from '@/utils/documentGenerator';

const Payment = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const wish = location.state?.wish || '';
  const price = location.state?.price || 299;
  const duration = location.state?.duration || '';
  const date = location.state?.date || null;
  const strength = location.state?.strength || 1;
  const [showDocument, setShowDocument] = useState(false);
  const [isGeneratingDocument, setIsGeneratingDocument] = useState(false);
  const documentRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // –ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ
    const script = document.createElement('script');
    script.src = 'https://securepay.tinkoff.ru/html/payForm/js/tinkoff_v2.js';
    script.async = true;
    script.onload = () => {
      console.log('Tinkoff script loaded successfully');
    };
    script.onerror = () => {
      console.error('Failed to load Tinkoff script');
    };
    document.body.appendChild(script);

    return () => {
      if (document.body.contains(script)) {
        document.body.removeChild(script);
      }
    };
  }, []);

  const handleDownloadDocument = async () => {
    if (!wish) {
      alert('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞');
      return;
    }

    setIsGeneratingDocument(true);
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
      setShowDocument(true);
      
      // –ñ–¥—ë–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const documentData: DocumentData = {
        wish,
        powerLevel: strength,
        userName: '–ü–æ–ª—É—á–∞—Ç–µ–ª—å —Å–∏–ª—ã',
        energyInvestment: price,
        affirmationText: generateAffirmationText(wish, strength)
      };
      
      await generateLuckDocument(documentData);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsGeneratingDocument(false);
      setShowDocument(false);
    }
  };

  const handleFormSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const form = e.currentTarget as HTMLFormElement;
    const { description, amount, email, receipt } = form;

    if (receipt) {
      if (!email.value) {
        return alert("–ü–æ–ª–µ E-mail –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
      }

      (receipt as HTMLInputElement).value = JSON.stringify({
        "EmailCompany": "mail@mail.com",
        "Taxation": "patent",
        "FfdVersion": "1.2",
        "Items": [
          {
            "Name": (description as HTMLInputElement).value || "–ê–∫—Ç–∏–≤–∞—Ü–∏—è —É–¥–∞—á–∏",
            "Price": Math.round(Number((amount as HTMLInputElement).value) * 100),
            "Quantity": 1.00,
            "Amount": Math.round(Number((amount as HTMLInputElement).value) * 100),
            "PaymentMethod": "full_prepayment",
            "PaymentObject": "service",
            "Tax": "none",
            "MeasurementUnit": "pc"
          }
        ]
      });
    }

    if ((window as any).pay) {
      (window as any).pay(form);
    } else {
      console.error('Tinkoff pay function not available');
      alert('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
  };

  return (
    <div className="min-h-screen bg-white flex flex-col items-center justify-center p-4">
      <div className="w-full max-w-2xl space-y-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <header className="text-center">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            –û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏
          </h1>
          <p className="text-lg text-gray-600">
            –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞—á—É
          </p>
        </header>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Icon name="Sparkles" size={24} />
              –í–∞—à–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ —É–¥–∞—á–∏
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="bg-gray-50 p-4 rounded-lg">
              <p className="text-gray-800 italic">"{wish}"</p>
            </div>
            <Separator className="my-4" />
            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <span className="text-lg">–¢–∞—Ä–∏—Ñ:</span>
                <span className="font-semibold">{duration || '–ê–∫—Ç–∏–≤–∞—Ü–∏—è —É–¥–∞—á–∏'}</span>
              </div>
              {date && (
                <div className="flex justify-between items-center">
                  <span className="text-lg">–î–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</span>
                  <span className="font-semibold">{date}</span>
                </div>
              )}
              <div className="flex justify-between items-center">
                <span className="text-lg">–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                <span className="text-2xl font-bold text-green-600">{price} ‚ÇΩ</span>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ */}
        <Card className="bg-purple-50 border-purple-200">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-purple-800">
              <Icon name="FileText" size={24} />
              –°–∫—Ä–∏–∂–∞–ª—å –£–¥–∞—á–∏
            </CardTitle>
            <CardDescription className="text-purple-600">
              –°–∫–∞—á–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–∏–ª—ã
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="text-center space-y-4">
              <p className="text-purple-700 text-sm">
                –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç "–°–∫—Ä–∏–∂–∞–ª—å –£–¥–∞—á–∏" –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–∏–ª–æ–π —É–¥–∞—á–∏.
              </p>
              <Button 
                onClick={handleDownloadDocument}
                disabled={isGeneratingDocument}
                className="w-full bg-purple-600 hover:bg-purple-700 text-white py-6 text-lg disabled:opacity-50"
              >
                {isGeneratingDocument ? (
                  <>
                    <Icon name="Loader2" size={20} className="mr-2 animate-spin" />
                    –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...
                  </>
                ) : (
                  <>
                    <Icon name="Download" size={20} className="mr-2" />
                    –°–∫–∞—á–∞—Ç—å –°–∫—Ä–∏–∂–∞–ª—å –£–¥–∞—á–∏ (PNG)
                  </>
                )}
              </Button>
              <div className="text-xs text-purple-500 space-y-1">
                <p>‚ú® –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏</p>
                <p>üéØ –í–∞—à–µ –∂–µ–ª–∞–Ω–∏–µ: "{wish}"</p>
                <p>‚ö° –£—Ä–æ–≤–µ–Ω—å —Å–∏–ª—ã: {location.state?.strength || 1}/10</p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* –§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã */}
        <Card>
          <CardHeader>
            <CardTitle>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –¢-–ë–∞–Ω–∫</CardTitle>
            <CardDescription>
              –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –¢-–ë–∞–Ω–∫
            </CardDescription>
          </CardHeader>
          <CardContent>
            <style>{`
              .payform-tbank {
                display: -webkit-box;
                display: -ms-flexbox;
                display: flex;
                margin: 2px auto;
                -webkit-box-orient: vertical;
                -webkit-box-direction: normal;
                -ms-flex-direction: column;
                flex-direction: column;
                max-width: 250px;
              }
              .payform-tbank * {
                display: block !important;
                visibility: visible !important;
                height: auto !important;
                opacity: 1 !important;
              }
              .payform-tbank {
                position: static !important;
                z-index: 9999 !important;
              }
              .payform-tbank-row {
                margin: 2px;
                border-radius: 4px;
                -webkit-box-flex: 1;
                -ms-flex: 1;
                flex: 1;
                -webkit-transition: 0.3s;
                -o-transition: 0.3s;
                transition: 0.3s;
                border: 1px solid #DFE3F3;
                padding: 15px;
                outline: none;
                background-color: #DFE3F3;
                font-size: 15px;
              }
              .payform-tbank-row:focus {
                background-color: #FFFFFF;
                border: 1px solid #616871;
                border-radius: 4px;
              }
              .payform-tbank-btn {
                background-color: #FBC520;
                border: 1px solid #FBC520;
                color: #3C2C0B;
              }
              .payform-tbank-btn:hover {
                background-color: #FAB619;
                border: 1px solid #FAB619;
              }
            `}</style>
            <form className="payform-tbank" name="payform-tbank" id="payform-tbank" onSubmit={handleFormSubmit} style={{ display: 'flex !important' }}>
              <input type="hidden" name="terminalkey" value="1755155028995" />
              <input type="hidden" name="frame" value="false" />
              <input type="hidden" name="language" value="ru" />
              <input type="hidden" name="receipt" value="" />
              <input type="hidden" name="password" value="JY#iJKaKe2rjfAI_" />
              <input type="hidden" name="spb" value="true" />
              <input 
                className="payform-tbank-row" 
                type="text" 
                placeholder="–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞" 
                name="amount" 
                value={price}
                readOnly
                required 
              />
              <input type="hidden" name="order" value={`order-${Date.now()}`} />
              <input 
                className="payform-tbank-row" 
                type="text" 
                placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞" 
                name="description"
                value={`${duration || '–ê–∫—Ç–∏–≤–∞—Ü–∏—è —É–¥–∞—á–∏'}${date ? ` –Ω–∞ ${date}` : ''}`}
                readOnly
              />
              <input 
                className="payform-tbank-row" 
                type="text" 
                placeholder="–§–ò–û –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞" 
                name="name"
                required
              />
              <input 
                className="payform-tbank-row" 
                type="email" 
                placeholder="E-mail" 
                name="email"
              />
              <input 
                className="payform-tbank-row payform-tbank-btn" 
                type="submit" 
                value="–û–ø–ª–∞—Ç–∏—Ç—å"
              />
            </form>
          </CardContent>
        </Card>

        {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ */}
        <div className="text-center">
          <Button variant="outline" onClick={() => navigate('/')}>
            <Icon name="ArrowLeft" size={16} className="mr-2" />
            –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
          </Button>
        </div>
        
        {/* –°–∫—Ä—ã—Ç—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
        {showDocument && (
          <div 
            ref={documentRef}
            className="fixed -top-[9999px] left-0 pointer-events-none"
            style={{ transform: 'scale(1)', transformOrigin: 'top left' }}
          >
            <LuckDocument 
              wish={wish}
              powerLevel={strength}
              userName="–ü–æ–ª—É—á–∞—Ç–µ–ª—å —Å–∏–ª—ã"
              energyInvestment={price}
              affirmationText={generateAffirmationText(wish, strength)}
            />
          </div>
        )}
      </div>
    </div>
  );
};

export default Payment;