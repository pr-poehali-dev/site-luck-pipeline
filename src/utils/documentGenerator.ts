export interface DocumentData {
  wish: string;
  powerLevel: number;
  userName?: string;
  energyInvestment: number;
  affirmationText: string;
}

export const generateLuckDocument = async (data: DocumentData): Promise<void> => {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:', data);
  
  try {
    // –°–æ–∑–¥–∞–µ–º canvas
    const canvas = document.createElement('canvas');
    canvas.width = 600;
    canvas.height = 800;
    
    const ctx = canvas.getContext('2d');
    if (!ctx) {
      throw new Error('Canvas –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º');
    }

    console.log('‚úÖ Canvas —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä:', canvas.width, 'x', canvas.height);

    // –§–æ–Ω
    ctx.fillStyle = '#2d1b69';
    ctx.fillRect(0, 0, 600, 800);
    console.log('‚úÖ –§–æ–Ω –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω');

    // –†–∞–º–∫–∞
    ctx.strokeStyle = 'white';
    ctx.lineWidth = 2;
    ctx.strokeRect(10, 10, 580, 780);
    console.log('‚úÖ –†–∞–º–∫–∞ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–∞');

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    ctx.fillStyle = 'white';
    ctx.font = 'bold 24px sans-serif';
    ctx.textAlign = 'center';
    ctx.fillText('–°–ö–†–ò–ñ–ê–õ–¨ –£–î–ê–ß–ò', 300, 50);

    // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    ctx.fillStyle = '#a855f7';
    ctx.font = '14px sans-serif';
    ctx.fillText('–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–∏–ª—ã', 300, 80);

    // –°–µ–∫—Ü–∏—è –£–î–ê–ß–ê
    ctx.fillStyle = 'white';
    ctx.font = 'bold 18px sans-serif';
    ctx.fillText('–£–î–ê–ß–ê', 300, 120);

    // –ñ–µ–ª–∞–Ω–∏–µ
    ctx.fillStyle = '#a855f7';
    ctx.font = '12px sans-serif';
    const wish = data.wish.length > 60 ? data.wish.substring(0, 60) + '...' : data.wish;
    ctx.fillText(`"${wish}"`, 300, 150);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    ctx.fillStyle = 'white';
    ctx.font = '14px sans-serif';
    ctx.textAlign = 'left';
    ctx.fillText(`–£—Ä–æ–≤–µ–Ω—å —Å–∏–ª—ã: ${data.powerLevel}/10`, 30, 200);
    ctx.fillText(`–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –≤–∫–ª–∞–¥: ${data.energyInvestment} ‚ÇΩ`, 30, 230);

    // –ê—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏
    ctx.textAlign = 'center';
    ctx.font = 'bold 16px sans-serif';
    ctx.fillText('–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –ê–§–§–ò–†–ú–ê–¶–ò–ò', 300, 280);
    
    ctx.font = 'bold 12px sans-serif';
    ctx.fillStyle = '#a855f7';
    ctx.fillText('–ü–†–ò–ù–Ø–¢–ò–ï –õ–Æ–ë–í–ò', 300, 300);

    ctx.font = '10px sans-serif';
    const affText = data.affirmationText.length > 100 ? data.affirmationText.substring(0, 100) + '...' : data.affirmationText;
    ctx.fillText(affText, 300, 330);

    // –ü–µ—á–∞—Ç—å
    ctx.fillStyle = '#4c1d95';
    ctx.beginPath();
    ctx.arc(480, 380, 25, 0, Math.PI * 2);
    ctx.fill();
    
    ctx.fillStyle = 'white';
    ctx.font = 'bold 6px sans-serif';
    ctx.textAlign = 'center';
    ctx.fillText('POEHALI.DEV', 480, 385);

    // –î–∞—Ç–∞ –∏ –Ω–æ–º–µ—Ä
    ctx.fillStyle = 'white';
    ctx.font = '10px sans-serif';
    ctx.textAlign = 'left';
    const now = new Date();
    const dateStr = now.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: 'long',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
    ctx.fillText(`–î–æ–∫—É–º–µ–Ω—Ç ‚Ññ: WD${Date.now()}`, 30, 450);
    ctx.fillText(`–î–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:`, 30, 470);
    ctx.fillText(dateStr, 30, 490);

    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    ctx.fillStyle = '#FBC520';
    ctx.fillRect(30, 550, 540, 30);
    ctx.strokeStyle = '#F59E0B';
    ctx.lineWidth = 2;
    ctx.strokeRect(30, 550, 540, 30);
    
    ctx.fillStyle = 'black';
    ctx.font = 'bold 10px sans-serif';
    ctx.textAlign = 'center';
    ctx.fillText('‚ö†Ô∏è –î–û–ö–£–ú–ï–ù–¢ –î–ï–ô–°–¢–í–£–ï–¢ –ü–û–°–õ–ï –û–ü–õ–ê–¢–´ –°–ò–õ–´! ‚ö†Ô∏è', 300, 570);

    // –ü–æ–ª—É—á–∞—Ç–µ–ª—å
    ctx.fillStyle = '#a855f7';
    ctx.font = '8px sans-serif';
    ctx.fillText(`–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${data.userName} ‚Ä¢ Email: user@example.com`, 300, 620);

    console.log('‚úÖ –†–∏—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ');

    // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–∏—Å –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
    return new Promise((resolve, reject) => {
      canvas.toBlob((blob) => {
        console.log('üì¶ Blob —Å–æ–∑–¥–∞–Ω:', blob);
        
        if (blob) {
          try {
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `–°–∫—Ä–∏–∂–∞–ª—å_–£–¥–∞—á–∏_${new Date().toISOString().slice(0, 10)}.png`;
            link.style.display = 'none';
            
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π URL
            setTimeout(() => {
              URL.revokeObjectURL(url);
            }, 1000);
            
            console.log('üéâ –§–∞–π–ª —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
            resolve();
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏:', error);
            reject(new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞'));
          }
        } else {
          console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å blob');
          reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å blob –∏–∑ canvas'));
        }
      }, 'image/png', 1.0);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
    throw error;
  }
};

export const generateAffirmationText = (wish: string, powerLevel: number): string => {
  const affirmations = [
    '–Ø –ø—Ä–∏–Ω–∏–º–∞—é –ª—é–±–æ–≤—å –≤–æ –≤—Å–µ—Ö –µ—ë –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è—Ö –∏ –æ—Ç–∫—Ä—ã–≤–∞—é —Å–≤–æ—ë —Å–µ—Ä–¥—Ü–µ –¥–ª—è –≥–ª—É–±–æ–∫–∏—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π',
    '–ú–æ—ë –∂–µ–ª–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–µ–≥–∫–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –ø—Ä–∏–Ω–æ—Å—è —Ä–∞–¥–æ—Å—Ç—å –∏ –≥–∞—Ä–º–æ–Ω–∏—é –≤ –º–æ—é –∂–∏–∑–Ω—å',
    '–Ø –¥–æ—Å—Ç–æ–∏–Ω(–∞) –≤—Å–µ—Ö –±–ª–∞–≥, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –º–æ—é –∂–∏–∑–Ω—å, –∏ –ø—Ä–∏–Ω–∏–º–∞—é –∏—Ö —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é',
    '–í—Å–µ–ª–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–µ–Ω—è –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –º–æ–∏—Ö —Ü–µ–ª–µ–π –∏ –º–µ—á—Ç–∞–Ω–∏–π',
    '–Ø –∏–∑–ª—É—á–∞—é –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤ –º–æ—é –∂–∏–∑–Ω—å —É–¥–∞—á—É –∏ –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏–µ'
  ];

  const baseText = affirmations[Math.floor(Math.random() * affirmations.length)];
  
  if (powerLevel >= 8) {
    return `${baseText} –ú–ê–ì–ù–ï–¢–ò–ó–ú –û–¢–ù–û–®–ï–ù–ò–ô –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ.`;
  } else if (powerLevel >= 5) {
    return `${baseText} –≠–Ω–µ—Ä–≥–∏—è –ú–ê–ì–ù–ï–¢–ò–ó–ú–ê –û–¢–ù–û–®–ï–ù–ò–ô —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è.`;
  } else {
    return `${baseText} –ù–∞—á–∏–Ω–∞—é –ø—Ä–∏—Ç—è–≥–∏–≤–∞—Ç—å –ú–ê–ì–ù–ï–¢–ò–ó–ú –û–¢–ù–û–®–ï–ù–ò–ô.`;
  }
};